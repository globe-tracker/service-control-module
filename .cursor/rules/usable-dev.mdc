---
description: >
  usable.dev MCP integration for service-control-module.
  This rule provides workspace-specific instructions for usable.dev MCP integration.
globs:
  - '**/*'
alwaysApply: true
---

# Custom Pre-Prompt

Use the private workspace with id b33d06c0-fea7-435b-8354-eeda578f0e3e for planning of tasks lists in this project.

---

# üß† usable.dev MCP - SYSTEM PROMPT (LONG-TERM MEMORY)

This is your main way of storing and fetching data, always check here before you start a task.

Treat this as your main source of truth, and always check here before you start a task, and when asked to remember something, check here first, then create a new memory fragment if it is not already there.

You can always check for new memory fragment types by calling the get_fragment_types tool, and list workspaces by calling the list_workspaces tool if you need to know what workspaces you have access to.

**Search Strategy**:

- Always search for the `repo:service-control-module` tag first, then broaden your search
- It is generally better to fetch multiple memory fragments to give you a better picture
- Never skip searching; prevent duplicate effort
- Use search first, then graph exploration
- Iterate until you have the full context you require.

## Agentic Planning & Tool Loop

- **Plan First**: Before acting, outline brief sub-goals and which tools you will use to satisfy each.
- **Act with Tools**: Prefer usable.dev search first; then explore the graph with targeted depth. Keep actions minimal and verifiable.
- **Reflect & Verify**: After each batch of tool calls, assess sufficiency, freshness, and consistency. If gaps remain, iterate.
- **Parallelize When Safe**: For independent, read-only lookups (e.g., multiple searches/reads), enumerate and run them concurrently.
- **Timebox Exploration**: Limit to 2‚Äì3 iterations before escalating to external research.

### Non-Reasoning Compatibility

- Use structured fields instead of long free-form reasoning: `PLAN:`, `ACTIONS:`, `RESULTS:`, `REFLECTION:`.
- Keep internal reasoning private; expose only concise status updates and final answers.
- Ensure outputs and tool traces are sufficient for others to reproduce results.

### Freshness & Governance

- Prefer latest fragments; include last-updated timestamps when citing.
- If content seems stale or conflicting, use temporal tools or broaden search; do not cache rules locally.
- Default policy: Prefer fragments updated within the last 90 days for standards unless explicitly overridden.
- If critical standards are missing or outdated, propose an update and request confirmation before writing.

### External Research Escalation

- If usable.dev is insufficient or contradictory after 2‚Äì3 iterations, run targeted external research, then reconcile with internal standards.
- Cite authoritative sources and align final recommendation with workspace rules and standards.

### Coding Task Bootstrap (Generic)

- Before writing code, fetch current language/framework/library standards from usable.dev (linting, testing, data access, UI, security).
- Enforce workspace rules: avoid adding new dependencies without consent; follow established data-access, state-management, and theming patterns.
- Validate environment assumptions and platform constraints before implementation.

## Instruction Set Discovery & Execution

**ü§ñ Smart Action Detection**: When users request actions rather than information, prioritize instruction set discovery.

### **Action-Oriented Request Patterns**

**Trigger Patterns** (automatically search instruction sets first):

- **"search for X and apply/install/configure"** ‚Üí Search for instruction sets matching X
- **"install X"** ‚Üí Look for installation instruction sets for X
- **"configure this workspace with X"** ‚Üí Find workspace configuration instruction sets
- **"apply X persona/template/setup"** ‚Üí Search for application instruction sets
- **"setup X environment/project"** ‚Üí Find environment setup instruction sets
- **"deploy X to Y"** ‚Üí Look for deployment instruction sets
- **"migrate from X to Y"** ‚Üí Find migration instruction sets

### **Instruction Set Discovery Workflow**

**Step 1: Pattern Recognition**

- Detect action-oriented language patterns above
- Identify the target entity (persona, tool, framework, etc.)
- Determine the action type (install, configure, apply, setup, etc.)

**Step 2: Targeted Instruction Set Search**

```
search_memory_fragments(
  query: "instruction set [action] [target]",
  fragmentTypeId: "instruction-set-type-id" // Use actual Instruction Set fragment type ID
)
```

**Step 3: Execution Decision**

- **If instruction set found**: Present to user for confirmation, then execute
- **If no instruction set found**: Fall back to general search for documentation/guides
- **If multiple found**: Present options to user for selection

### **Execution Confirmation Pattern**

When instruction set is found:
> *"I found an instruction set for '[action] [target]'. This will [brief description of what it does]. Shall I execute it?"*

**Step 4: Fallback to General Search**
If no instruction sets match, proceed with normal search strategy focusing on:

- Recipes for manual procedures
- Knowledge for understanding concepts
- Solutions for troubleshooting issues

## Self Improvement

**Triggers**

- New code, ideas or patterns that are not already stored in memory
- IF you repeatedly run into the same issue
- Common error patterns that could be prevented
- Changes/Emerging changes to the best practices or changes to tooling the the codebase

**Analysis process**

- Always search for existing memory fragments
- Identify what patterns and create a standardized memory fragment
- Update PRDs for the repository if they exist
- Ensure type checks and linting works
- If there are tests ensure they also pass

**Create new memory fragment**

- When you see new tech or pattern used in 3+ files
- Common bugs could be prevented by a memory fragment search
- New patterns emerge

**Update memory fragment**

- Better examples exist in the codebase
- Additional edge cases are discovered
- Related Plans, PRDs knowledge has changed

When improving on things to do or not do emphasize what to do, do not include what you should not do in code blocks.

- **Main points in Bold**
  - Sub points with details
  - Include examples and explanations
  - Whys and What for

- **Code Examples:**
  - Use language-specific code blocks

  ```typescript
  // ‚úÖ DO: Show good examples
  const goodExample = true;
  
  // ‚ùå DON'T: Show anti-patterns
  const badExample = false;
  ```

Repository: service-control-module
WorkspaceId: f3c9feef-b8e6-4a23-bda0-0d90cd5162d1
Workspace: GT Shared Knowledge
Workspace Fragment Types: instruction set, knowledge, recipe, solution, template, policies

## Fragment Type Mapping

The following fragment types are available in this workspace:

- **Instruction Set**: `8595e526-de75-4c73-b707-42a0466313e1` - A set of instructions for the LLM to perform a set of actions, like setting up a project, installing a persona etc.
- **Knowledge**: `92c928de-f7e1-4d34-aa61-bcb1b4ea91f8` - General information, documentation, and reference material
- **Recipe**: `0ae0666b-efd9-4588-af8e-e955eab86310` - Step-by-step guides, tutorials, and procedures
- **Solution**: `454e182a-1706-4d72-b307-44c962bbed75` - Solutions to specific problems and troubleshooting guides
- **Template**: `313d9b20-53a8-43eb-bc91-6ac8893d358c` - Reusable code patterns, project templates, and boilerplates
- **Policies**: `1a91b781-afb5-42ce-8d35-04d72d36d769` - Policy documents for Globetracker

## CRITICAL: Fragment Type Selection Guide

**üö® NEVER DEFAULT TO "RECIPE" - Always analyze the content purpose first!**

### **Fragment Type Decision Framework**

**BEFORE creating any fragment, ask yourself:**

1. **What is the primary purpose of this content?**
2. **Who will use this and how?**
3. **What type of information does it contain?**

### **Fragment Type Usage Guide**

#### **üìö Knowledge** - General information, documentation, and reference material

**Use when creating:**

- Documentation and reference materials
- Concept explanations and overviews
- Background information and context
- Research findings and insights
- General "what is X?" content

**Examples:** "Understanding OAuth 2.0", "Database Design Principles", "Company Architecture Overview"

#### **üë®‚Äçüç≥ Recipe** - Step-by-step guides, tutorials, and procedures

**Use when creating:**

- Step-by-step instructions
- Tutorials and how-to guides
- Installation procedures
- Deployment processes
- Any sequential "how to do X" content

**Examples:** "How to Set Up Docker", "Deploy to Production Checklist", "User Onboarding Tutorial"

#### **üí° Solution** - Solutions to specific problems and troubleshooting guides

**Use when creating:**

- Bug fixes and troubleshooting
- Problem-solving approaches
- Error resolution guides
- Workarounds for specific issues
- "How to fix X problem" content

**Examples:** "Fix CORS Issues", "Resolve Database Connection Timeout", "Handle Memory Leaks"

#### **üìÑ Template** - Reusable code patterns, project templates, and boilerplates

**Use when creating:**

- Code templates and boilerplates
- Project scaffolding
- Reusable patterns and snippets
- Standard configurations
- Copy-paste ready code

**Examples:** "API Route Template", "Docker Compose Boilerplate", "React Component Pattern"

#### **ü§ñ Instruction Set** - Executable instructions for LLM actions and automation

**Use when creating:**

- Step-by-step instructions for LLM to execute specific actions
- Automation workflows and procedures for AI assistants
- Multi-step processes that require LLM decision-making and tool usage
- Setup and configuration procedures for projects/tools/environments
- Standardized workflows for common development tasks
- AI-driven troubleshooting and deployment procedures
- Persona installation and workspace configuration workflows

**Examples:** "Setup New Project", "Deploy to Production Workflow", "Install Development Environment", "Apply Persona", "Configure Docker Environment", "Migrate Database Schema"

#### **üìã Plan** - Project plans, roadmaps, and strategic documents

**Use when creating:**

- Project plans and roadmaps
- Implementation strategies
- Milestone and timeline documents
- Resource allocation plans
- "What we will build and when" content

**Examples:** "Q2 Feature Roadmap", "Migration Strategy", "Team Scaling Plan"

#### **üìä PRD** - Product Requirements Documents and specifications

**Use when creating:**

- Product specifications
- Feature requirements
- Technical specifications
- User requirements documentation
- "What to build and why" content

**Examples:** "User Authentication Feature Specs", "API Design Requirements", "Mobile App PRD"

### **Common Mistakes to Avoid**

‚ùå **DON'T use Recipe for:**

- Project plans (use **Plan**)
- Product specifications (use **PRD**)
- Problem solutions (use **Solution**)
- General documentation (use **Knowledge**)
- LLM automation workflows (use **Instruction Set**)

‚ùå **DON'T use Knowledge for:**

- Step-by-step procedures (use **Recipe**)
- Specific problem fixes (use **Solution**)
- Future planning documents (use **Plan**)
- LLM executable instructions (use **Instruction Set**)

‚ùå **DON'T use Solution for:**

- General how-to guides (use **Recipe**)
- Preventive documentation (use **Knowledge**)
- Planning documents (use **Plan**)

‚ùå **DON'T use Instruction Set for:**

- Human-only procedures (use **Recipe**)
- General documentation (use **Knowledge**)
- Simple code templates (use **Template**)
- Information without executable actions (use **Knowledge**)

### **Quick Decision Checklist**

**When user asks to create/document:**

- [ ] **"How to..."** ‚Üí Recipe
- [ ] **"Fix..."** ‚Üí Solution  
- [ ] **"Plan for..."** ‚Üí Plan
- [ ] **"Requirements for..."** ‚Üí PRD
- [ ] **"What is..."** ‚Üí Knowledge
- [ ] **"Template for..."** ‚Üí Template
- [ ] **"Instructions for LLM to..."** ‚Üí Instruction Set
- [ ] **"Workflow for..."** ‚Üí Instruction Set
- [ ] **"Install/Configure/Apply..."** ‚Üí Instruction Set

**If content contains:**

- [ ] **Sequential steps for humans** ‚Üí Recipe
- [ ] **Sequential steps for LLM execution** ‚Üí Instruction Set
- [ ] **Problem + solution** ‚Üí Solution
- [ ] **Future objectives** ‚Üí Plan
- [ ] **Product specs** ‚Üí PRD
- [ ] **Reference info** ‚Üí Knowledge
- [ ] **Reusable code** ‚Üí Template
- [ ] **LLM executable actions** ‚Üí Instruction Set
- [ ] **Automation workflows** ‚Üí Instruction Set

### **Fragment Type Selection Priority**

1. **Analyze the user's exact request** - pay attention to keywords
2. **Identify the content structure** - steps, problems, plans, specs, etc.
3. **Consider the intended use** - reference, execution, planning, troubleshooting
4. **Choose the most specific type** - don't default to generic types
5. **When in doubt, ask the user** for clarification

**üéØ REMEMBER: The fragment type should match the content's PRIMARY PURPOSE, not just its format!**

## usable.dev Discovery & Exploration

### **Primary Discovery Process (Start Here)**

**Step 1: Vector Search First**

- Use `search_memory_fragments` with semantic search (understands meaning, not just keywords)
- Always start with `repo:service-control-module` tag first, then broaden if needed
- Try different phrasings if initial search yields no results
- Search with `workspaceId` first, then without it for broader cross-workspace results

#### Mandatory Graph Exploration Heuristics

- After the first `search_memory_fragments`, always branch out via graph calls by default:
  - Choose starting points (parallelizable):
    - Fragments: pick top-K by similarity (break ties by most-recent update). Use `K = 5` if results ‚â• 20, else `K = 3`.
    - Tags: extract top 2 salient tags from results (if available).
  - For each starting fragment: run `explore_workspace_graph` (exploration) with `depth=2`, `includeEdgeTypes=["has_tag","similar","related"]`.
  - In parallel: run `find_related_fragments` for the top 1‚Äì2 fragments.
  - For each starting tag: run `explore_workspace_graph` (exploration) with `depth=1`.
- Skip graph exploration only if ALL are true: the question is trivial, there is exactly one high-confidence fragment (similarity ‚â• 0.92), that fragment was updated within 14 days, and it directly contains the complete answer.

- Branching loop (2 rounds max by default):
  - Prefer following discovered fragments/tags over using `overview` mode.
  - Re-rank newly discovered nodes by similarity + recency; pick the next 1‚Äì2 best starting points and repeat once.
  - If results conflict or feel redundant, adjust starting points rather than broadening indiscriminately.

- Non-reasoning structured control (suggested fields):
  - GRAPH_PLAN: short list of starting fragment IDs/tags, depth, edges, and parallel calls planned.
  - GRAPH_ACTIONS: the concrete tool invocations to execute now.
  - GRAPH_RESULTS: brief summary of discovered nodes/relations.
  - GRAPH_NEXT: whether to deepen exploration, branch to other tags, or proceed.

**Step 2: Follow the Thread (Iterative Exploration)**

- Pick key fragments from Step 1 and explore their connections
- Use `explore_workspace_graph` in exploration mode (depth 2+ recommended)
- Look for: Similar/Related fragments, Concepts, Technologies
- Target 5-10 exploration trips based on task complexity
- Use `find_related_fragments` for direct relationship discovery

**Step 3: Deep Context Building**

- Continue iterative exploration until confident you have full picture
- Use discovered fragment/concept IDs as new starting points
- For trivial questions, Steps 1-2 may be sufficient
- For complex tasks, comprehensive exploration prevents repeated mistakes

### **Tool-Specific Guidance**

### `search_memory_fragments`

**Primary discovery tool - start here**

- **Always include repository context** - start with `repo:service-control-module` tag
- Use semantic search for concepts, not exact text matching
- **Decision logic**: Evaluate query complexity and result completeness to determine next steps

### `explore_workspace_graph`

**Two modes for different needs:**

**üéØ EXPLORATION MODE (Preferred for most scenarios):**

- **When to use**: Targeted discovery from specific starting points
- **Key insight**: Works perfectly with any fragment ID - use directly from search results
- **Concept exploration**: Use format `concepts/normalized_name` - very effective
- **Depth recommendations**: Use depth 2+ to see connections-of-connections
- **Starting points**: Fragment IDs, tag names, or concept IDs from previous discoveries

**üìä OVERVIEW MODE (Use sparingly):**

- **When to use**: Only when completely unfamiliar with workspace or lacking starting points
- **Key insight**: Now returns actual data (recent fix applied)
- **Warning**: Can be overwhelming - prefer exploration mode for focused discovery

**üîó Available Connection Types** (for `includeEdgeTypes`):

- `"has_tag"` - Topic/technology connections (most common)
- `"similar"`, `"related"` - AI-discovered content relationships  
- `"references_concept"` - Conceptual knowledge connections
- `"created_by"` - Author-based discovery
- **Default**: Empty array `[]` uses all connection types

### `explore_tag_connections`

**Tag-centric cluster discovery**

- **When to use**: Direct tag-based lookups (*"show everything about <technology>"*)
- Faster than full graph traversal when you know specific tags
- **Key params**: `tags`, `workspaceId`, `limit`

### `find_related_fragments`

**Sibling/related document discovery**

- **When to use**: Expand context around specific fragment
- Uses similarity + tag relationships for targeted expansion
- **Recent fix**: Now returns real data with titles, summaries, and metadata
- **Key params**: `fragmentId` (from previous steps), `limit`

### `get_memory_fragment_content`

**Full document retrieval**

- **When to use**: Deep-dive on confirmed relevant fragment
- Fetches complete content including metadata
- **Key params**: `fragmentId` (from search/exploration results)

## Recent System Enhancements

**‚úÖ Reliable Patterns Now Available:**

- **Overview mode**: Returns actual data (200+ fragments, 50+ tags, 1000+ concepts)
- **Node IDs**: Full IDs exposed for direct iterative exploration
- **Related fragments**: Returns real data with titles, summaries, and metadata
- **Concept exploration**: Use `concepts/event_sourcing` format - very effective
- **Fragment exploration**: Any fragment ID works directly as starting point

## Temporal Analysis (When Evolution Context Needed)

**Use temporal tools when queries involve**: "changed", "evolved", "used to", "before/after", "why different", "when did"

**Quick Temporal Exploration:**

- `get_temporal_relationships` with `includeHistory: true` - see relationship evolution
- `explore_workspace_graph_temporal` with `asOfDate` - time-travel to specific point
- `get_relationship_history` - understand specific relationship changes

**Skip temporal tools for**: Current state queries, performance-critical searches

### `get_temporal_relationships`

**Time-aware relationship querying**

- **Key params**: `fragmentId`, `workspaceId`, optional `asOfDate`, `includeHistory`, `onlyActive`
- **Use cases**: "What relationships did this fragment have last month?", "Show evolution"

### `explore_workspace_graph_temporal`

**Enhanced graph exploration with time dimensions**

- **Temporal features**: `asOfDate`, `includeTemporalHistory`, `showOnlyActiveRelationships`
- **Use cases**: "How did the graph look 3 months ago?", "What changed this week?"

### `get_relationship_history`

**Temporal relationship evolution tracking**

- **Key params**: `fromFragmentId`, `toFragmentId`, `workspaceId`
- **Use cases**: Understanding relationship changes, debugging evolution patterns

### `list_workspaces`

**Workspace discovery and access management**

- List all accessible workspaces with role information and permissions
- **When to use**: Understanding available knowledge contexts

### `get_fragment_types`

**Fragment type discovery for workspace**

- Retrieve all available fragment types including system defaults and custom types
- **When to use**: Before creating fragments to validate type IDs

## Fragment Creation & Updates

### `create_memory_fragment`

**Create new knowledge artifacts**

- **üö® CRITICAL: ALWAYS use the Fragment Type Selection Guide above to choose the correct type**
- **NEVER default to "Recipe"** - analyze content purpose first
- Use when you identify non-trivial solutions, patterns, recipes, or templates
- **Always include repository context** for better organization

**Enhanced Process for Fragment Creation:**

1. **Analyze user request** using the Fragment Type Decision Framework
2. **Apply the Quick Decision Checklist** to determine correct type
3. **Draft fragment** with appropriate type selection
4. **Propose to user** with clear type justification
5. **Create only after user confirmation**

**Confirmation examples with type justification:**

- *"I'd like to document this as a `solution` fragment titled `<title>` because it solves a specific problem. Proceed?"*
- *"I'd like to document this as a `plan` fragment titled `<title>` because it outlines future objectives and timelines. Proceed?"*
- *"I'd like to document this as a `prd` fragment titled `<title>` because it contains product requirements and specifications. Proceed?"*

### `update_memory_fragment`  

**Refine existing knowledge - supports two powerful modes**

**LEGACY MODE (backwards compatible):**

- Use when improving solutions, adding information, or correcting content
- **Process**: Draft update ‚Üí Show user ‚Üí User confirms ‚Üí Apply

**PATCH MODE (new) - for precise line-level modifications:**

- Use when making surgical changes to specific lines without affecting rest of content
- **When to use**: Adding imports, modifying specific functions, inserting comments
- **Benefits**: Reduced token usage, preserves content structure

**Line Number Guidelines (CRITICAL):**

- **All line numbers are 1-based** (first line = 1, not 0)
- **Add operations**: Insert at specified line number (existing lines shift down)
- **Delete operations**: Remove from startLine to endLine (inclusive)
- **Replace operations**: Replace from startLine to endLine with new content

**IMPORTANT CONSTRAINTS:**

- ‚ö†Ô∏è **Cannot mix modes**: Never use both 'content' and 'patchOperations' in same request
- ‚ö†Ô∏è **No overlapping operations**: Each line can only be affected by one operation
- ‚ö†Ô∏è **Bounds checking**: All line numbers must be within existing content bounds

## Recommended Workflow

### **Pre-Task Discovery**

1. **Search**: `search_memory_fragments` with `repo:service-control-module` tag
2. **Explore**: Follow connections from key fragments using exploration mode (depth 2+)
3. **Iterate**: Continue until you have sufficient context (5-10 exploration trips typical)

### **Complexity Assessment**

- **Simple queries**: Vector search may be sufficient
- **Complex tasks**: Always do iterative exploration for comprehensive understanding
- **When in doubt**: Explore more rather than less - builds better solutions

### **Post-Task Documentation**

If you identify novel insights or solutions:

1. **Draft & Propose**: Build fragment structure and ask user for approval
   > *"I'd like to document this as a `<type>` fragment titled `<title>`. Proceed?"*
2. **Create**: `create_memory_fragment` only after user confirmation

**Never create/update fragments without explicit user confirmation**

## Fragment Creation Strategy

**Always provide `repository` context** in every MCP call when available (e.g. `"memory-mesh"`).

**Document when you identify:**

- Novel solutions or non-obvious patterns
- Reusable recipes and templates  
- Critical fixes or workarounds
- Architectural insights or best practices

### **CRITICAL: Tag Character Restrictions**

**‚ö†Ô∏è IMPORTANT: Tags have strict character requirements to prevent validation errors:**

**‚úÖ ALLOWED characters in tags:**

- **Alphanumeric**: a-z, A-Z, 0-9
- **Underscore**: _
- **Dash**: -
- **Colon**: :

**‚ùå FORBIDDEN characters in tags:**

- **Dots**: . (common mistake with domain names)
- **Spaces**: (space character)
- **Special characters**: @ # $ % & * ( ) + = [ ] { } | \ / ? < > , ; " '

**For domain names, use dashes instead of dots:**

- Domain: example.com ‚Üí Tag: "example-com"
- Domain: api.service.io ‚Üí Tag: "api-service-io"

## Common Generic Tags

**Technology & Framework Tags:**

- 'nodejs', 'javascript', 'typescript', 'python', 'react', 'angular', 'vue', 'nextjs'
- 'express', 'fastify', 'nestjs', 'spring-boot', 'django', 'flask', 'rails'
- 'docker', 'kubernetes', 'aws', 'azure', 'gcp', 'terraform', 'ansible'

**Database & Storage Tags:**

- 'database', 'sql', 'nosql', 'mongodb', 'postgresql', 'mysql', 'redis', 'elasticsearch'
- 'prisma', 'typeorm', 'sequelize', 'mongoose', 'knex'

**Development & Architecture Tags:**

- 'authentication', 'authorization', 'oauth', 'jwt', 'security', 'encryption'
- 'api', 'rest', 'graphql', 'microservices', 'monolith', 'serverless'
- 'testing', 'unit-tests', 'integration-tests', 'e2e-tests', 'mocking'
- 'ci-cd', 'deployment', 'devops', 'monitoring', 'logging', 'performance'

**UI & Frontend Tags:**

- 'ui', 'ux', 'design-system', 'components', 'responsive', 'accessibility'
- 'theme', 'styling', 'css', 'sass', 'tailwind', 'styled-components'
- 'forms', 'validation', 'state-management', 'routing', 'animation'

**General Development Tags:**

- 'configuration', 'environment', 'debugging', 'optimization', 'refactoring'
- 'error-handling', 'validation', 'caching', 'pagination', 'search'
- 'file-upload', 'email', 'notifications', 'scheduling', 'background-jobs'

## Auto-Enhancement

The MCP server automatically:

- Injects `repo:service-control-module` tag when repository context provided
- Detects and tags technologies and topics from content
- Prevents duplicate fragments through similarity analysis
- Formats content for optimal readability and search

## Key Success Factors

- **START** with search, **EVALUATE** query complexity and result completeness
- **BALANCE** speed for simple queries with thoroughness for complex research
- **USE** discovered node IDs for iterative chaining when proceeding to exploration
- **OFFER** further exploration even when Step 1 provides complete answers
- **CONFIRM** before creating/updating fragments
- **INCLUDE** repository context for better organization
- **üéØ ALWAYS USE CORRECT FRAGMENT TYPE** - follow the Fragment Type Selection Guide and never default to "Recipe"
